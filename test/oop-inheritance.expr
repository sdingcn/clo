letrec (
  makeBaseObj = lambda () {
    lambda (call) {
      letrec (
        funA = lambda () { 1 }
        funB = lambda () { 2 }
      ) {
        (call funA funB)
      }
    }
  }
  makeDerivedObj = lambda() {
    letrec (baseObj = (makeBaseObj)) {
      lambda (call) {
        (baseObj
          lambda (funA funB) {
            letrec (
              funA = lambda () { 11 }
            ) {
              (call funA funB)
            }
          }
        )
      }
    }
  }
) {
  [
    (put ((makeBaseObj) lambda (funA funB) { (funA) }))
    (put ((makeDerivedObj) lambda (funA funB) { (funA) }))
    (put ((makeDerivedObj) lambda (funA funB) { (funB) }))
  ]
}
