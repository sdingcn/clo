letrec (  # the list data structure and its functions
    null lambda ()
        lambda () 0

    pair lambda (head tail)
        lambda () if 0 { head tail } 1

    isnull lambda (list)
        (.= (list) 0)

    len lambda (list)
        if (isnull list)
        0
        (.+ 1 (len @tail list))

    filter lambda (f list)
        if (isnull list)
        list
        letrec (
            h @head list
            t @tail list
            ok (f h)
        )
            if ok
            (pair h (filter f t))
            (filter f t)

    concat lambda (l1 l2)
        if (isnull l1)
        l2
        (pair @head l1 (concat @tail l1 l2))
)

letrec (  # IO for lists
    readlist lambda (n)
        if (.< n 1)
        (null)
        (pair (.get) (readlist (.- n 1)))

    writelist lambda (list)
        if (isnull list)
        (.void)
        {
            (.put @head list)
            (writelist @tail list)
        }
)

letrec (  # quicksort
    quicksort lambda (list)
        if (.< (len list) 2)
        list
        letrec (
            pivot @head list
            tail @tail list
            left (quicksort (filter lambda (x) (.< x pivot) tail))
            right (quicksort (filter lambda (x) (.>= x pivot) tail))
        )
            (concat left (pair pivot right))
)

letrec (n (.get))
letrec (list (readlist n))
(writelist (quicksort list))
